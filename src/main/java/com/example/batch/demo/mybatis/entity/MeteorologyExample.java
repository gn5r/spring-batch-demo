package com.example.batch.demo.mybatis.entity;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class MeteorologyExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public MeteorologyExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andPrefectureIsNull() {
            addCriterion("prefecture is null");
            return (Criteria) this;
        }

        public Criteria andPrefectureIsNotNull() {
            addCriterion("prefecture is not null");
            return (Criteria) this;
        }

        public Criteria andPrefectureEqualTo(String value) {
            addCriterion("prefecture =", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureNotEqualTo(String value) {
            addCriterion("prefecture <>", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureGreaterThan(String value) {
            addCriterion("prefecture >", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureGreaterThanOrEqualTo(String value) {
            addCriterion("prefecture >=", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureLessThan(String value) {
            addCriterion("prefecture <", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureLessThanOrEqualTo(String value) {
            addCriterion("prefecture <=", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureLike(String value) {
            addCriterion("prefecture like", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureNotLike(String value) {
            addCriterion("prefecture not like", value, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureIn(List<String> values) {
            addCriterion("prefecture in", values, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureNotIn(List<String> values) {
            addCriterion("prefecture not in", values, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureBetween(String value1, String value2) {
            addCriterion("prefecture between", value1, value2, "prefecture");
            return (Criteria) this;
        }

        public Criteria andPrefectureNotBetween(String value1, String value2) {
            addCriterion("prefecture not between", value1, value2, "prefecture");
            return (Criteria) this;
        }

        public Criteria andMeasureDateIsNull() {
            addCriterion("measure_date is null");
            return (Criteria) this;
        }

        public Criteria andMeasureDateIsNotNull() {
            addCriterion("measure_date is not null");
            return (Criteria) this;
        }

        public Criteria andMeasureDateEqualTo(LocalDate value) {
            addCriterion("measure_date =", value, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateNotEqualTo(LocalDate value) {
            addCriterion("measure_date <>", value, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateGreaterThan(LocalDate value) {
            addCriterion("measure_date >", value, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateGreaterThanOrEqualTo(LocalDate value) {
            addCriterion("measure_date >=", value, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateLessThan(LocalDate value) {
            addCriterion("measure_date <", value, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateLessThanOrEqualTo(LocalDate value) {
            addCriterion("measure_date <=", value, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateIn(List<LocalDate> values) {
            addCriterion("measure_date in", values, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateNotIn(List<LocalDate> values) {
            addCriterion("measure_date not in", values, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateBetween(LocalDate value1, LocalDate value2) {
            addCriterion("measure_date between", value1, value2, "measureDate");
            return (Criteria) this;
        }

        public Criteria andMeasureDateNotBetween(LocalDate value1, LocalDate value2) {
            addCriterion("measure_date not between", value1, value2, "measureDate");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureIsNull() {
            addCriterion("heighest_temperature is null");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureIsNotNull() {
            addCriterion("heighest_temperature is not null");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureEqualTo(Float value) {
            addCriterion("heighest_temperature =", value, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureNotEqualTo(Float value) {
            addCriterion("heighest_temperature <>", value, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureGreaterThan(Float value) {
            addCriterion("heighest_temperature >", value, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureGreaterThanOrEqualTo(Float value) {
            addCriterion("heighest_temperature >=", value, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureLessThan(Float value) {
            addCriterion("heighest_temperature <", value, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureLessThanOrEqualTo(Float value) {
            addCriterion("heighest_temperature <=", value, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureIn(List<Float> values) {
            addCriterion("heighest_temperature in", values, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureNotIn(List<Float> values) {
            addCriterion("heighest_temperature not in", values, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureBetween(Float value1, Float value2) {
            addCriterion("heighest_temperature between", value1, value2, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andHeighestTemperatureNotBetween(Float value1, Float value2) {
            addCriterion("heighest_temperature not between", value1, value2, "heighestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureIsNull() {
            addCriterion("lowest_temperature is null");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureIsNotNull() {
            addCriterion("lowest_temperature is not null");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureEqualTo(Float value) {
            addCriterion("lowest_temperature =", value, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureNotEqualTo(Float value) {
            addCriterion("lowest_temperature <>", value, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureGreaterThan(Float value) {
            addCriterion("lowest_temperature >", value, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureGreaterThanOrEqualTo(Float value) {
            addCriterion("lowest_temperature >=", value, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureLessThan(Float value) {
            addCriterion("lowest_temperature <", value, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureLessThanOrEqualTo(Float value) {
            addCriterion("lowest_temperature <=", value, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureIn(List<Float> values) {
            addCriterion("lowest_temperature in", values, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureNotIn(List<Float> values) {
            addCriterion("lowest_temperature not in", values, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureBetween(Float value1, Float value2) {
            addCriterion("lowest_temperature between", value1, value2, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andLowestTemperatureNotBetween(Float value1, Float value2) {
            addCriterion("lowest_temperature not between", value1, value2, "lowestTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureIsNull() {
            addCriterion("average_temperature is null");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureIsNotNull() {
            addCriterion("average_temperature is not null");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureEqualTo(Float value) {
            addCriterion("average_temperature =", value, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureNotEqualTo(Float value) {
            addCriterion("average_temperature <>", value, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureGreaterThan(Float value) {
            addCriterion("average_temperature >", value, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureGreaterThanOrEqualTo(Float value) {
            addCriterion("average_temperature >=", value, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureLessThan(Float value) {
            addCriterion("average_temperature <", value, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureLessThanOrEqualTo(Float value) {
            addCriterion("average_temperature <=", value, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureIn(List<Float> values) {
            addCriterion("average_temperature in", values, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureNotIn(List<Float> values) {
            addCriterion("average_temperature not in", values, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureBetween(Float value1, Float value2) {
            addCriterion("average_temperature between", value1, value2, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andAverageTemperatureNotBetween(Float value1, Float value2) {
            addCriterion("average_temperature not between", value1, value2, "averageTemperature");
            return (Criteria) this;
        }

        public Criteria andCreatedAtIsNull() {
            addCriterion("created_at is null");
            return (Criteria) this;
        }

        public Criteria andCreatedAtIsNotNull() {
            addCriterion("created_at is not null");
            return (Criteria) this;
        }

        public Criteria andCreatedAtEqualTo(LocalDateTime value) {
            addCriterion("created_at =", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtNotEqualTo(LocalDateTime value) {
            addCriterion("created_at <>", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtGreaterThan(LocalDateTime value) {
            addCriterion("created_at >", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("created_at >=", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtLessThan(LocalDateTime value) {
            addCriterion("created_at <", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("created_at <=", value, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtIn(List<LocalDateTime> values) {
            addCriterion("created_at in", values, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtNotIn(List<LocalDateTime> values) {
            addCriterion("created_at not in", values, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("created_at between", value1, value2, "createdAt");
            return (Criteria) this;
        }

        public Criteria andCreatedAtNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("created_at not between", value1, value2, "createdAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtIsNull() {
            addCriterion("updated_at is null");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtIsNotNull() {
            addCriterion("updated_at is not null");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtEqualTo(LocalDateTime value) {
            addCriterion("updated_at =", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtNotEqualTo(LocalDateTime value) {
            addCriterion("updated_at <>", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtGreaterThan(LocalDateTime value) {
            addCriterion("updated_at >", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("updated_at >=", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtLessThan(LocalDateTime value) {
            addCriterion("updated_at <", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("updated_at <=", value, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtIn(List<LocalDateTime> values) {
            addCriterion("updated_at in", values, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtNotIn(List<LocalDateTime> values) {
            addCriterion("updated_at not in", values, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("updated_at between", value1, value2, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andUpdatedAtNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("updated_at not between", value1, value2, "updatedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtIsNull() {
            addCriterion("deleted_at is null");
            return (Criteria) this;
        }

        public Criteria andDeletedAtIsNotNull() {
            addCriterion("deleted_at is not null");
            return (Criteria) this;
        }

        public Criteria andDeletedAtEqualTo(LocalDateTime value) {
            addCriterion("deleted_at =", value, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtNotEqualTo(LocalDateTime value) {
            addCriterion("deleted_at <>", value, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtGreaterThan(LocalDateTime value) {
            addCriterion("deleted_at >", value, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtGreaterThanOrEqualTo(LocalDateTime value) {
            addCriterion("deleted_at >=", value, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtLessThan(LocalDateTime value) {
            addCriterion("deleted_at <", value, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtLessThanOrEqualTo(LocalDateTime value) {
            addCriterion("deleted_at <=", value, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtIn(List<LocalDateTime> values) {
            addCriterion("deleted_at in", values, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtNotIn(List<LocalDateTime> values) {
            addCriterion("deleted_at not in", values, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("deleted_at between", value1, value2, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeletedAtNotBetween(LocalDateTime value1, LocalDateTime value2) {
            addCriterion("deleted_at not between", value1, value2, "deletedAt");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagIsNull() {
            addCriterion("delete_flag is null");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagIsNotNull() {
            addCriterion("delete_flag is not null");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagEqualTo(Boolean value) {
            addCriterion("delete_flag =", value, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagNotEqualTo(Boolean value) {
            addCriterion("delete_flag <>", value, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagGreaterThan(Boolean value) {
            addCriterion("delete_flag >", value, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagGreaterThanOrEqualTo(Boolean value) {
            addCriterion("delete_flag >=", value, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagLessThan(Boolean value) {
            addCriterion("delete_flag <", value, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagLessThanOrEqualTo(Boolean value) {
            addCriterion("delete_flag <=", value, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagIn(List<Boolean> values) {
            addCriterion("delete_flag in", values, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagNotIn(List<Boolean> values) {
            addCriterion("delete_flag not in", values, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagBetween(Boolean value1, Boolean value2) {
            addCriterion("delete_flag between", value1, value2, "deleteFlag");
            return (Criteria) this;
        }

        public Criteria andDeleteFlagNotBetween(Boolean value1, Boolean value2) {
            addCriterion("delete_flag not between", value1, value2, "deleteFlag");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table meteorology
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table meteorology
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}